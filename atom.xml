<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yuoboo&#39;s Blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yubing.info/"/>
  <updated>2018-10-24T06:09:18.376Z</updated>
  <id>http://www.yubing.info/</id>
  
  <author>
    <name>yuoboo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-test</title>
    <link href="http://www.yubing.info/2018/python-test/"/>
    <id>http://www.yubing.info/2018/python-test/</id>
    <published>2018-10-24T01:33:33.000Z</published>
    <updated>2018-10-24T06:09:18.376Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文摘自<a href="https://wangdoc.com/javascript/" target="_blank" rel="noopener">阮一峰JS教程</a></p></blockquote><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ul><li>什么是DOM</li><li>DOM与html， DOM与JavaScript的关系</li><li>DOM的结构是怎么样的</li><li>JS是如何操控DOM的</li></ul><h5 id="Node接口"><a href="#Node接口" class="headerlink" title="Node接口"></a>Node接口</h5><p><strong>节点Node</strong></p><ul><li>节点是DOM的最小组成单位</li><li>nodeType</li><li>nodeValue<ul><li>nodeValue属性返回一个字符串，表示当前节点本身的文本值，该属性可读写。</li><li>只有文本节点（text）、注释节点（comment）和属性节点（attr）有文本值，因此这三类节点的nodeValue可以返回结果，其他类型的节点一律返回null。同样的，也只有这三类节点可以设置nodeValue属性的值，其他类型的节点设置无效</li></ul></li><li><p>parentNode</p><ul><li>对于一个节点来说，它的父节点只可能是三种类型：元素节点（element）、文档节点（document）和文档片段节点（documentfragment）</li></ul></li><li><p>replaceChild(newNode, oldNode)  替换节点</p></li><li>normalize： 清除空的文本节点并且合并相邻的文本节点</li></ul><h5 id="NodeList-amp-amp-Htmlcollection-接口"><a href="#NodeList-amp-amp-Htmlcollection-接口" class="headerlink" title="NodeList &amp;&amp; Htmlcollection 接口"></a>NodeList &amp;&amp; Htmlcollection 接口</h5><p><strong>NodeList</strong></p><ul><li>NodeList实例是一个类似数组的对象，它的成员是节点对象;通过以下方法可以得到NodeList实例。<ul><li>Node.childNodes</li><li>document.querySelectorAll()等节点搜索方法</li></ul></li><li>NodeList实例很像数组，可以使用length属性和forEach方法。但是，它不是数组，不能使用pop或push之类数组特有的方法。</li><li>NodeList.prototype.keys(): 返回键名的遍历器</li><li>NodeList.prototype.values(): 返回键值的遍历器</li><li>NodeList.prototype.entries(): 返回同时包含键值和键名的遍历器</li><li>可以使用<code>for...of</code>来遍历遍历器对象</li></ul><blockquote><p>注意，NodeList 实例可能是动态集合，也可能是静态集合。所谓动态集合就是一个活的集合，DOM 删除或新增一个相关节点，都会立刻反映在 NodeList 实例。目前，只有Node.childNodes返回的是一个动态集合，其他的 NodeList 都是静态集合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.childNodes <span class="keyword">instanceof</span> NodeList <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.body.childNodes;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> item = children[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.body.childNodes;</span><br><span class="line">children.length <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'p'</span>));</span><br><span class="line">children.length <span class="comment">// 19</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> children = <span class="built_in">document</span>.body.childNodes;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> children.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> entry <span class="keyword">of</span> children.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HTMLcollection</strong></p><ul><li>HTMLCollection是一个节点对象的集合，只能包含元素节点（element），不能包含其他类型的节点。它的返回值是一个类似数组的对象，但是与NodeList接口不同，HTMLCollection没有forEach方法，只能使用for循环遍历</li><li>返回HTMLCollection实例的，主要是一些Document对象的集合属性，比如document.links、docuement.forms、document.images等</li><li>HTMLCollection实例都是动态集合，节点的变化会实时反映在集合中</li><li>如果元素节点有id或name属性，那么HTMLCollection实例上面，可以使用id属性或name属性引用该节点元素。如果没有对应的节点，则返回null</li><li>HTMLCollection.prototype.length</li><li>HTMLCollection.prototype.namedItem():namedItem方法的参数是一个字符串，表示id属性或name属性的值，返回对应的元素节点,如果没有对应的节点，则返回null.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.links <span class="keyword">instanceof</span> HTMLCollection <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML 代码如下</span></span><br><span class="line"><span class="comment">// &lt;img id="pic" src="http://example.com/foo.jpg"&gt;</span></span><br><span class="line"><span class="keyword">var</span> pic = <span class="built_in">document</span>.getElementById(<span class="string">'pic'</span>);</span><br><span class="line"><span class="built_in">document</span>.images.pic === pic <span class="comment">// true</span></span><br><span class="line"><span class="built_in">document</span>.images.namedItem(<span class="string">'pic'</span>) === pic <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;此文摘自&lt;a href=&quot;https://wangdoc.com/javascript/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰JS教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;DOM&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Python" scheme="http://www.yubing.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.yubing.info/tags/Python/"/>
    
      <category term="test" scheme="http://www.yubing.info/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>python基础之属性方法</title>
    <link href="http://www.yubing.info/2018/python%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B1%9E%E6%80%A7%E6%96%B9%E6%B3%95/"/>
    <id>http://www.yubing.info/2018/python基础之属性方法/</id>
    <published>2018-06-07T15:58:29.000Z</published>
    <updated>2018-10-23T10:24:55.045Z</updated>
    
    <content type="html"><![CDATA[<!-- ![picture][id]   --><h6 id="类属性和实例属性"><a href="#类属性和实例属性" class="headerlink" title="类属性和实例属性"></a>类属性和实例属性</h6><ul><li>类属性是 <em>类对象</em> 所拥有的属性,它被所有的类对象的实例对象所共有,在内存中只存在一个副本</li><li>对于公有的类属性在类外可以通过类对象和实例对象访问, 私有类属性不可以</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    address = <span class="string">'湖北'</span>   <span class="comment">#公有的类属性</span></span><br><span class="line">    __country = <span class="string">'china'</span>    <span class="comment">#私有的类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'xiaowang'</span>   <span class="comment">#实例属性</span></span><br><span class="line">        self.age = <span class="number">20</span>   <span class="comment">#实例属性</span></span><br><span class="line">p = People()</span><br><span class="line">print(p.__country)        <span class="comment">#错误，不能在类外通过实例对象访问私有的类属性</span></span><br><span class="line">print(People.__country)   <span class="comment">#错误，不能在类外通过类对象访问私有的类属性</span></span><br><span class="line">p.age =<span class="number">12</span> <span class="comment">#实例属性</span></span><br><span class="line">print(p.name)    <span class="comment">#正确  实例属性</span></span><br><span class="line">print(p.age)     <span class="comment">#正确  实例属性</span></span><br><span class="line">print(People.address) <span class="comment">#正确  类对象访问类属性</span></span><br><span class="line">print(People.name)    <span class="comment">#错误  类对象无法访问实例属性</span></span><br><span class="line">p.address = <span class="string">'广东'</span>    <span class="comment">#新建同名实例属性, 并不会更改同名类属性, 实例属性会屏蔽掉同名的类属性</span></span><br><span class="line"><span class="keyword">del</span> p.address    <span class="comment">#删除实例属性</span></span><br><span class="line">People.address = <span class="string">'广东'</span>  <span class="comment"># 类对象才会修改雷属性</span></span><br></pre></td></tr></table></figure><ul><li>如果需要在类外修改类属性，必须通过类对象去引用然后进行修改。如果通过实例对象去引用，会产生一个同名的实例属性，这种方式修改的是实例属性，不会影响到类属性，并且之后如果通过实例对象去引用该名称的属性，实例属性会强制屏蔽掉类属性，即引用的是实例属性，除非删除了该实例属性  </li></ul><h6 id="类方法-实例方法和静态方法"><a href="#类方法-实例方法和静态方法" class="headerlink" title="类方法,实例方法和静态方法"></a>类方法,实例方法和静态方法</h6><ul><li>类方法: 是类对象所拥有的方法，需要用修饰器<code>@classmethod</code>来标识其为类方法，对于类方法，第一个参数必须是类对象，一般以<code>cls</code>作为第一个参数（当然可以用其他名称的变量作为其第一个参数，但是大部分人都习惯以<code>cls</code>作为第一个参数的名字，就最好用<code>cls</code>了），能够通过 <em>实例对象和类对象</em> 去访问  </li><li>类方法还有一个用途就是可以对类属性进行修改  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    __country = <span class="string">'china'</span>   <span class="comment"># 私有类属性在类外部无法访问和修改</span></span><br><span class="line">    <span class="comment">#类方法，用classmethod来进行修饰</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.__country</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCountry</span><span class="params">(cls,country)</span>:</span></span><br><span class="line">        cls.__country = country</span><br><span class="line"></span><br><span class="line">    p = People()</span><br><span class="line">    <span class="keyword">print</span> p.getCountry()    <span class="comment">#可以用过实例对象引用</span></span><br><span class="line">    <span class="keyword">print</span> People.getCountry()    <span class="comment">#可以通过类对象引用</span></span><br><span class="line">    p.setCountry(<span class="string">'japan'</span>)   </span><br><span class="line">    <span class="keyword">print</span> p.getCountry()   </span><br><span class="line">    <span class="keyword">print</span> People.getCountry()</span><br></pre></td></tr></table></figure><ul><li>静态方法: 需要通过修饰器<code>@staticmethod</code>来进行修饰，静态方法不需要多定义参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">()</span>:</span>   <span class="comment">#静态方法</span></span><br><span class="line">        <span class="keyword">return</span> People.country</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> People.getCountry()</span><br></pre></td></tr></table></figure><ul><li>从类方法和实例方法以及静态方法的定义形式就可以看出来，类方法的第一个参数是类对象cls，那么通过cls引用的必定是类对象的属性和方法；而实例方法的第一个参数是实例对象self，那么通过self引用的可能是类属性、也有可能是实例属性（这个需要具体分析），不过在存在相同名称的类属性和实例属性的情况下，实例属性优先级更高。静态方法中不需要额外定义参数，因此在静态方法中引用类属性的话，必须通过类对象来引用</li><li>两者最明显的区别是:类方法必须有一个类对象参数,静态方法不需要任务参数  </li></ul><h6 id="init-和-new-的区别"><a href="#init-和-new-的区别" class="headerlink" title="__init__ 和 __new__ 的区别:"></a><code>__init__</code> 和 <code>__new__</code> 的区别:</h6><ul><li><code>__new__</code>在<code>__init__</code>之前执行  </li><li><code>__new__</code>至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供   </li><li><code>__new__</code>必须要有返回值，返回实例化出来的实例，这点在自己实现<code>__new__</code>时要特别注意，可以<code>return</code>父类<code>__new__</code>出来的实例，或者直接是<code>object</code>的<code>__new__</code>出来的实例  </li><li><code>__init__</code>有一个参数self，就是这个<code>__new__</code>返回的实例，<code>__init__</code>在<code>__new__</code>的基础上可以完成一些其它初始化的动作，<code>__init__</code>不需要返回值</li><li><code>__new__</code> 来实现单例模式  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">      print(<span class="string">"这是 init 方法"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">      print(<span class="string">"这是 new 方法"</span>)</span><br><span class="line">      <span class="keyword">return</span> object.__new__(cls)</span><br></pre></td></tr></table></figure><ul><li>调用父类初始化方法的三种方式:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">      <span class="comment"># 调用父类的__init__方法1(python2)</span></span><br><span class="line">      A.__init__(self)</span><br><span class="line">      <span class="comment"># 调用父类的__init__方法2</span></span><br><span class="line">      super(B,self).__init__()</span><br><span class="line">      <span class="comment"># 调用父类的__init__方法3</span></span><br><span class="line">      super().__init__()</span><br></pre></td></tr></table></figure><h6 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h6><ul><li>单例:确保某一个类只有一个实例,而且自行实例化并向整个系统提供这个实例,这个类称为单例类,单例模式是一种对象创建型模式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span><span class="params">(object)</span>:</span></span><br><span class="line">    __instance = <span class="keyword">None</span></span><br><span class="line">    __first_init = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> __instance:</span><br><span class="line">        cls.__instance = object.__new__(cls)</span><br><span class="line">      <span class="keyword">return</span> cls.__instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> __first_init:</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        Single.__first_init = <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- ![picture][id]   --&gt;
&lt;h6 id=&quot;类属性和实例属性&quot;&gt;&lt;a href=&quot;#类属性和实例属性&quot; class=&quot;headerlink&quot; title=&quot;类属性和实例属性&quot;&gt;&lt;/a&gt;类属性和实例属性&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;类属性是 &lt;em&gt;类对象&lt;/
      
    
    </summary>
    
      <category term="Python" scheme="http://www.yubing.info/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.yubing.info/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python中编码的那些事</title>
    <link href="http://www.yubing.info/2018/python%E4%B8%AD%E7%BC%96%E7%A0%81%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://www.yubing.info/2018/python中编码的那些事/</id>
    <published>2018-05-07T18:54:13.000Z</published>
    <updated>2018-10-23T10:24:55.044Z</updated>
    
    <content type="html"><![CDATA[<h5 id="TODO-各种编码的区别"><a href="#TODO-各种编码的区别" class="headerlink" title="TODO 各种编码的区别"></a>TODO 各种编码的区别</h5><ul><li>在Python中,编码分为文本编码,url编码和解释器编码</li><li>下面从这三个方面来对比Python2 与 Python3的区别</li></ul><p>Python2中:</p><ul><li><p>Python2解释器默认编码为ASCII编码,使用python2时基本都用’utf-8’所以经常会出现下面这种错误,这是由于解释器编码问题导致</p><blockquote><p>UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xe4 in position 0</p></blockquote></li><li><p>解决方案:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">  reload(sys)</span><br><span class="line">  sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></li><li><p>python2中文本编码,python2中字符串类型一种 str(非unicode) ,一种 unicode,不同编码格式字符串之间不能直接转码,需要先解码(encode(‘utf8’))到中间状态unicode,再decode(‘gbk’)到想要的编码格式</p></li><li><p>python2中url编码与python3差别不大,这个主要是依赖urllib库</p></li><li><p>python3中编码问题就简单很多了, 因为python3解释器默认为’utf-8’,基本没有解释器编码的问题烦恼</p></li><li><p>python3中文本编码也简单许多, 因为python3中的字符串一种str(默认为unicode类型), 一种为bytes类型,str由于默认为unicode,所以不同编码格式之间可以直接转码不需要切换到中间状态</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;TODO-各种编码的区别&quot;&gt;&lt;a href=&quot;#TODO-各种编码的区别&quot; class=&quot;headerlink&quot; title=&quot;TODO 各种编码的区别&quot;&gt;&lt;/a&gt;TODO 各种编码的区别&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;在Python中,编码分为文本编码,url编码和
      
    
    </summary>
    
      <category term="初级" scheme="http://www.yubing.info/categories/%E5%88%9D%E7%BA%A7/"/>
    
    
      <category term="Python" scheme="http://www.yubing.info/tags/Python/"/>
    
      <category term="编码" scheme="http://www.yubing.info/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
</feed>
